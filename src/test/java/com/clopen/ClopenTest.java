package com.clopen;
import static org.junit.Assert.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.awt.Point;
import org.junit.Test;
    
public class ClopenTest
{
    @Test
    public void rectangle(){
	ArrayList<Edge> rect = new ArrayList(Arrays.asList(
					     new Edge(new Point(0,0),new Point(0,1)),
					     new Edge(new Point(0,1),new Point(0,2)),
					     new Edge(new Point(0,2),new Point(0,3)),
					     new Edge(new Point(0,3),new Point(0,4)),
					     new Edge(new Point(1,4),new Point(0,4)),
					     new Edge(new Point(2,4),new Point(1,4)),
					     new Edge(new Point(3,4),new Point(2,4)),
					     new Edge(new Point(4,4),new Point(3,4)),
					     new Edge(new Point(4,4),new Point(4,3)),
					     new Edge(new Point(4,3),new Point(4,2)),
					     new Edge(new Point(4,2),new Point(4,1)),
					     new Edge(new Point(4,1),new Point(4,0)),
					     new Edge(new Point(3,0),new Point(4,0)),
					     new Edge(new Point(2,0),new Point(3,0)),
					     new Edge(new Point(1,0),new Point(2,0)),
					     new Edge(new Point(0,0),new Point(1,0))
							   ));
	
	assertTrue("Test to see if a basic rectangle is closed: ", Clopen.isClosed(rect));
	assertTrue("Test to see if a point is inside the rectpp: ", Clopen.isInside(rect, new Point(1,2)));
	assertFalse("Test to see if point is outside the rect: ", Clopen.isInside(rect, new Point(10,10)));
    }
    
    @Test
    public void polygon(){
	ArrayList<Edge> rect = new ArrayList(Arrays.asList(
					     new Edge(new Point(0,0),new Point(0,1)),
					     new Edge(new Point(0,1),new Point(0,2)),
					     new Edge(new Point(0,2),new Point(0,3)),
					     new Edge(new Point(0,3),new Point(0,4)),
					     new Edge(new Point(1,4),new Point(0,4)),
					     new Edge(new Point(2,4),new Point(1,4)),
					     new Edge(new Point(3,4),new Point(2,4)),
					     new Edge(new Point(4,4),new Point(3,4)),
					     new Edge(new Point(4,4),new Point(4,3)),
					     new Edge(new Point(4,3),new Point(4,2)),
					     new Edge(new Point(4,2),new Point(4,1)),
					     new Edge(new Point(4,1),new Point(4,0)),
					     new Edge(new Point(3,0),new Point(4,0)),
					     new Edge(new Point(2,0),new Point(3,0)),
					     new Edge(new Point(1,0),new Point(2,0)),
					     new Edge(new Point(0,0),new Point(1,0))
							   ));
	
    }
}
